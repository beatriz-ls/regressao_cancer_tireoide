Pathology == "Follicular" ~ "Folicular",
Pathology == "Hurthel cell" ~ "Células de Hurthle")),
foco = as.factor(ifelse(Focality == "Uni-Focal","Unifocal","Multifocal")),
risco = as.factor(case_when(Risk  == "Low" ~ "Baixo",
#Risk == "Itermediate" ~ "Intermediato",
TRUE ~ "Alto")),
resposta_tratamento = as.factor(case_when(Response == "Indeterminate" ~ "Indeterminado",
Response == "Excellent" ~ "Excelente",
Response == "Structural Incomplete" ~ "Estrutura incompleta",
TRUE ~ "Bioquimica incompleta")),
reocorrencia = as.factor(ifelse(Recurred == "No", "Não", "Sim")),
T = factor(case_when(T == "T1a" ~ "T1",
T == "T1b" ~ "T1",
T == "T2" ~ "T2",
T == "T3a" ~ "T3",
T == "T3b" ~ "T3",
T =="T4a" ~ "T4",
T == "T4b" ~ "T4"),
levels = c("T1", "T2", "T3", "T4")),
M = factor(case_when(M == "M0" ~ "M0",
M == "M1" ~ "M1"),
levels = c("M0", "M1")),
N = factor(case_when(N == "N0" ~ "N0",
N == "N1a" ~ "N1",
N == "N1b" ~ "N1"),
levels = c("N0", "N1"))) %>%
mutate(faixa_etaria = factor(faixa_etaria,
levels = c("Adolescente", "Jovem Adulto", "Adulto", "Idoso")),
risco = factor(risco, levels = c("Baixo", "Alto")),
estagio = factor(Stage, levels = c("I", "II", "III", "IVA", "IVB"))) %>%
select(-c(Age, Gender, Smoking, `Hx Smoking`, `Thyroid Function`,
`Physical Examination`, `Adenopathy`, `Pathology`, `Focality`, `Risk`,
`Stage`,`Response`, `Recurred`, `Hx Radiothreapy`))
## NA surgem depois do tratamento
sum(is.na(dt))
View(dt)
View(dt0)
dt0 <- read_csv("data/Thyroid_Diff.csv")
sum(is.na(dt0))
dt <- dt0 |>
mutate(faixa_etaria = case_when(#Age < 14 ~ "Infantil",
Age >= 14 & Age < 20 ~ "Adolescente",
Age >= 20 & Age < 35 ~ "Jovem Adulto",
Age >= 35 & Age < 60 ~ "Adulto",
TRUE ~ "Idoso"),
genero = as.factor(ifelse(Gender == "F", "Mulher", "Homem")),
fumante = as.factor(ifelse(Smoking == "No", "Não", "Sim")),
historico_fumante = as.factor(ifelse(`Hx Smoking` == "No" ,"Não","Sim")),
historico_radioterapia = as.factor(ifelse(`Hx Radiothreapy` == "No","Não","Sim")),
quadro_tireoide = as.factor(case_when(`Thyroid Function` == "Euthyroid" ~ "Eutireoide",
`Thyroid Function` == "Clinical Hyperthyroidism" ~ "Hipertireoidismo Clínico",
`Thyroid Function` == "Clinical Hypothyroidism" ~ "Hipotireoidismo Clínico",
`Thyroid Function` == "Subclinical Hyperthyroidism" ~ "Hipertireoidismo Subclínico",
`Thyroid Function` == "Subclinical Hypothyroidism" ~ "Hipotireoidismo Subclínico")),
exame_fisico = as.factor(case_when(`Physical Examination` == "Single nodular goiter-left" ~ "Bócio nodular único à esquerda",
`Physical Examination` == "Single nodular goiter-right" ~ "Bócio nodular único à direita",
`Physical Examination` == "Multinodular goiter" ~ "Bócio multinodular",
`Physical Examination` == "Diffuse goiter" ~ "Bócio difuso",
TRUE ~ "Normal")),
adenopatia = as.factor(case_when(Adenopathy == "No" ~ "Não",
Adenopathy == "Right" ~ "Direita",
Adenopathy == "Extensive" ~ "Extensivo",
Adenopathy == "Left" ~ "Esquerda",
Adenopathy == "Bilateral" ~ "Bilateral",
Adenopathy == "Posterior" ~"Posterior")),
patologia = as.factor(case_when(Pathology == "Micropapillary" ~ "Micropapilar",
Pathology == "Papillary" ~ "Papilar",
Pathology == "Follicular" ~ "Folicular",
Pathology == "Hurthel cell" ~ "Células de Hurthle")),
foco = as.factor(ifelse(Focality == "Uni-Focal","Unifocal","Multifocal")),
risco = as.factor(case_when(Risk  == "Low" ~ "Baixo",
#Risk == "Itermediate" ~ "Intermediato",
TRUE ~ "Alto")),
resposta_tratamento = as.factor(case_when(Response == "Indeterminate" ~ "Indeterminado",
Response == "Excellent" ~ "Excelente",
Response == "Structural Incomplete" ~ "Estrutura incompleta",
TRUE ~ "Bioquimica incompleta")),
reocorrencia = as.factor(ifelse(Recurred == "No", "Não", "Sim")),
T = factor(case_when(T == "T1a" ~ "T1",
T == "T1b" ~ "T1",
T == "T2" ~ "T2",
T == "T3a" ~ "T3",
T == "T3b" ~ "T3",
T =="T4a" ~ "T4",
T == "T4b" ~ "T4"),
levels = c("T1", "T2", "T3", "T4")),
M = factor(case_when(M == "M0" ~ "M0",
M == "M1" ~ "M1"),
levels = c("M0", "M1")),
N = factor(case_when(N == "N0" ~ "N0",
N == "N1a" ~ "N1",
N == "N1b" ~ "N1"),
levels = c("N0", "N1"))) %>%
mutate(faixa_etaria = factor(faixa_etaria,
levels = c("Adolescente", "Jovem Adulto", "Adulto", "Idoso")),
risco = factor(risco, levels = c("Baixo", "Alto")),
estagio = factor(Stage, levels = c("I", "II", "III", "IVA", "IVB"))) %>%
select(-c(Age, Gender, Smoking, `Hx Smoking`, `Thyroid Function`,
`Physical Examination`, `Adenopathy`, `Pathology`, `Focality`, `Risk`,
`Stage`,`Response`, `Recurred`, `Hx Radiothreapy`))
## NA surgem depois do tratamento
sum(is.na(dt))
library(tidymodels)
set.seed(2814)
split <- initial_split(dt_clean, strata = reocorrencia)
dt.train <- training(split)
dt.test  <- testing(split)
set.seed(2814)
split <- initial_split(dt_clean, strata = reocorrencia)
dt.train <- training(split)
set.seed(2814)
split <- initial_split(dt, strata = reocorrencia)
dt.train <- training(split)
dt.test  <- testing(split)
modelo <- glm(reocorrencia ~ .,
data = dt.train, family = binomial)
summary(modelo)
car::vif(modelo)
step_modelo <- MASS::stepAIC(modelo,
direction = "both",
trace = 0)
summary(step_modelo)
modelo_firth <- logistf::logistf(reocorrencia ~ resposta_tratamento,
data = dt.train)
summary(modelo_firth)
probabilidades <- predict(modelo_firth, newdata = dt.test, type = "response")
predicoes <- ifelse(probabilidades > 0.5, "Sim", "Não")
conf_matrix <- caret::confusionMatrix(as.factor(predicoes),
dt.test$reocorrencia,
positive = "Sim")
conf_matrix
summary(modelo_firth)
modelo_firth <- logistf::logistf(reocorrencia ~ .,
data = dt.train)
summary(modelo_firth)
modelo_firth <- logistf::logistf(reocorrencia ~ .,
data = dt.train)
probabilidades <- predict(modelo_firth, newdata = dt.test, type = "response")
probabilidades <- predict(modelo_firth, newdata = dt.test, type = "response")
modelo_firth <- logistf::logistf(reocorrencia ~ .,
data = dt.train)
modelo_firth <- logistf::logistf(reocorrencia ~ .,
data = dt.train)
# Libs
library(vcd)
library(summarytools)
library(gtsummary)
# Tabela qui quadrado e fisher
tab_perfil_risco <- dt %>%
tbl_summary(include = c(faixa_etaria, genero, fumante, historico_fumante,
historico_radioterapia, quadro_tireoide),
by = risco) %>%
add_p(test = list(faixa_etaria ~ "fisher.test",
genero ~ "chisq.test",
fumante ~ "chisq.test",
historico_fumante ~ "chisq.test",
historico_radioterapia ~ "fisher.test",
quadro_tireoide ~ "fisher.test"),
pvalue_fun = ~ style_pvalue(.x, digits = 2))
devtools::install_github("ddsjoberg/gtsummary")
p2 <- ggplot(dt, aes(x = genero)) +
geom_bar(fill = "pink") +
labs(title = "Distribuição de Gênero",
x = "Gênero",
y = "Frequência") +
theme_minimal()
p3 <- ggplot(dt, aes(x = fumante)) +
geom_bar(fill = "lightgreen") +
labs(title = "Distribuição de Fumante",
x = "Fumante",
y = "Frequência") +
theme_minimal()
p4 <- ggplot(dt, aes(x = historico_fumante)) +
geom_bar(fill = "purple") +
labs(title = "Distribuição de Histórico de Fumo",
x = "Histórico de Fumante",
y = "Frequência") +
theme_minimal()
p5 <- ggplot(dt, aes(x = historico_radioterapia)) +
geom_bar(fill = "yellow") +
labs(title = "Distribuição de Histórico de Radioterapia",
x = "Histórico de Radioterapia",
y = "Frequência") +
theme_minimal()
# Libs
library(vcd)
library(summarytools)
library(gtsummary)
library(ggplot2)
devtools::install_github("ddsjoberg/gtsummary")
table(dt$T)
table(dt$N)
table(dt$M)
table(dt$faixa_etaria)
table(dt$genero)
table(dt$fumante)
table(dt$historico_fumante)
table(dt$historico_radioterapia)
table(dt$quadro_tireoide)
table(dt$exame_fisico)
table(dt$adenopatia)
table(dt$patologia)
table(dt$foco)
table(dt$risco)
table(dt$resposta_tratamento)
table(dt$reocorrencia)
table(dt$estagio)
dt1 <- dt0 |>
mutate(faixa_etaria = Age,
genero = as.factor(ifelse(Gender == "F", "Mulher", "Homem")),
fumante = as.factor(ifelse(Smoking == "No", "Não", "Sim")),
historico_fumante = as.factor(ifelse(`Hx Smoking` == "No" ,"Não","Sim")),
#historico_radioterapia = as.factor(ifelse(`Hx Radiothreapy` == "No","Não","Sim")),
quadro_tireoide = as.factor(case_when(`Thyroid Function` == "Euthyroid" ~ "Eutireoide",
`Thyroid Function` == "Clinical Hyperthyroidism" ~ "Hipertireoidismo Clínico",
`Thyroid Function` == "Clinical Hypothyroidism" ~ "Hipotireoidismo Clínico",
`Thyroid Function` == "Subclinical Hyperthyroidism" ~ "Hipertireoidismo Subclínico",
`Thyroid Function` == "Subclinical Hypothyroidism" ~ "Hipotireoidismo Subclínico")),
exame_fisico = as.factor(case_when(`Physical Examination` == "Single nodular goiter-left" ~ "Bócio nodular único à esquerda",
`Physical Examination` == "Single nodular goiter-right" ~ "Bócio nodular único à direita",
`Physical Examination` == "Multinodular goiter" ~ "Bócio multinodular",
`Physical Examination` == "Diffuse goiter" ~ "Bócio difuso",
TRUE ~ "Normal")),
adenopatia = as.factor(case_when(Adenopathy == "No" ~ "Ausente",
TRUE ~ "Presente")),
patologia = as.factor(case_when(Pathology == "Micropapillary" ~ "Micropapilar",
Pathology == "Papillary" ~ "Papilar",
Pathology == "Follicular" ~ "Folicular",
Pathology == "Hurthel cell" ~ "Células de Hurthle")),
foco = as.factor(ifelse(Focality == "Uni-Focal","Unifocal","Multifocal")),
risco = as.factor(case_when(Risk  == "Low" ~ "Baixo",
#Risk == "Itermediate" ~ "Intermediato",
TRUE ~ "Alto")),
resposta_tratamento = as.factor(case_when(Response == "Indeterminate" ~ "Indeterminado",
Response == "Excellent" ~ "Excelente",
Response == "Structural Incomplete" ~ "Estrutura incompleta",
TRUE ~ "Bioquimica incompleta")),
reocorrencia = as.factor(ifelse(Recurred == "No", "Não", "Sim")),
T = factor(case_when(T == "T1a" ~ "T1",
T == "T1b" ~ "T1",
T == "T2" ~ "T2",
T == "T3a" ~ "T3",
T == "T3b" ~ "T3",
T =="T4a" ~ "T4",
T == "T4b" ~ "T4"),
levels = c("T1", "T2", "T3", "T4")),
M = factor(case_when(M == "M0" ~ "M0",
M == "M1" ~ "M1"),
levels = c("M0", "M1")),
N = factor(case_when(N == "N0" ~ "N0",
N == "N1a" ~ "N1",
N == "N1b" ~ "N1"),
levels = c("N0", "N1")),
estagio = factor(case_when(
Stage == "I" ~ "I",
TRUE ~ "Acima de I"
), levels = c("I", "Acima de I"))) %>%
select(-c(Age, Gender, Smoking, `Hx Smoking`, `Thyroid Function`,
`Physical Examination`, `Adenopathy`, `Pathology`, `Focality`, `Risk`,
`Stage`,`Response`, `Recurred`, `Hx Radiothreapy`))
modelo_firth <- logistf::logistf(reocorrencia ~ .,
data = dt.train,
control = logistf.control(maxit = 200, maxstep = 5),
plcontrol = logistpl.control(maxit = 500))
##### PACOTES #####
library(tidyverse)
##### PACOTES #####
library(tidyverse)
library(tidymodels)
library(cutpointr)
library(glmnet)
library(vip)
library(logistf)
set.seed(2814)
split <- initial_split(dt, strata = reocorrencia)
dt.train <- training(split)
dt.test  <- testing(split)
modelo_firth <- logistf::logistf(reocorrencia ~ .,
data = dt.train,
control = logistf.control(maxit = 200, maxstep = 5),
plcontrol = logistpl.control(maxit = 500))
summary(modelo_firth)
summary(modelo_firth)
# --- 1. Ajuste do modelo inicial com todas as variáveis ---
modelo_firth <- logistf(
reocorrencia ~ .,
data = dt.train,
control = logistf.control(maxit = 200, maxstep = 5),
plcontrol = logistpl.control(maxit = 500)
)
summary(modelo_firth)
# --- 2. Extrair OR e IC ---
resultados <- data.frame(
Variavel = rownames(modelo_firth$coef),
OR = exp(modelo_firth$coef),
IC_lower = exp(modelo_firth$ci.lower),
IC_upper = exp(modelo_firth$ci.upper)
)
# --- 2. Extrair OR e IC ---
resultados <- data.frame(
Variavel = names(modelo_firth$coefficients),
OR = exp(modelo_firth$coefficients),
IC_lower = exp(modelo_firth$ci.lower),
IC_upper = exp(modelo_firth$ci.upper)
)
# --- 3. Identificar variáveis problemáticas ---
# Critério: IC infinitos ou IC extremamente amplo (>100x da OR)
problematicas <- resultados %>%
filter(is.infinite(IC_lower) | is.infinite(IC_upper) |
(IC_upper / IC_lower > 100))
problematicas
problematicas
set.seed(2814)
split <- initial_split(dt1, strata = reocorrencia)
dt.train <- training(split)
dt.test  <- testing(split)
modelo_firth <- logistf::logistf(reocorrencia ~ .,
data = dt.train,
control = logistf.control(maxit = 200, maxstep = 5),
plcontrol = logistpl.control(maxit = 500))
summary(modelo_firth)
# --- 1. Ajuste do modelo inicial com todas as variáveis ---
modelo_firth <- logistf(
reocorrencia ~ .,
data = dt.train,
control = logistf.control(maxit = 200, maxstep = 5),
plcontrol = logistpl.control(maxit = 500)
)
summary(modelo_firth)
# --- 2. Extrair OR e IC ---
resultados <- data.frame(
Variavel = names(modelo_firth$coefficients),
OR = exp(modelo_firth$coefficients),
IC_lower = exp(modelo_firth$ci.lower),
IC_upper = exp(modelo_firth$ci.upper)
)
# --- 3. Identificar variáveis problemáticas ---
# Critério: IC infinitos ou IC extremamente amplo (>100x da OR)
problematicas <- resultados %>%
filter(is.infinite(IC_lower) | is.infinite(IC_upper) |
(IC_upper / IC_lower > 100))
problematicas
problematicas
# Exemplo de remoção sugerida:
variaveis_para_remover <- problematicas$Variavel
variaveis_para_remover
# Stepwise backward (remover variáveis não significativas)
mod_step <- step(modelo_firth, direction = "backward")
summary(mod_step)
# Stepwise backward (remover variáveis não significativas)
mod_step <- step(modelo_firth, direction = "backward")
library(dplyr)
library(glmnet)
library(logistf)
library(caret)
set.seed(123)
# --- 1. Separar treino e teste (70%-30%) ---
train_index <- createDataPartition(dt1$reocorrencia, p = 0.7, list = FALSE)
train_data <- dt1[train_index, ]
test_data  <- dt1[-train_index, ]
# --- 2. Preparar matrizes para glmnet ---
# glmnet precisa de matriz numérica; usamos model.matrix para fatores
X_train <- model.matrix(reocorrencia ~ ., data = train_data)[, -1]
y_train <- ifelse(train_data$reocorrencia == "Sim", 1, 0)
X_test <- model.matrix(reocorrencia ~ ., data = test_data)[, -1]
y_test <- ifelse(test_data$reocorrencia == "Sim", 1, 0)
# --- 3. Ajustar LASSO logistic ---
cv_lasso <- cv.glmnet(
X_train, y_train, family = "binomial",
alpha = 1, nfolds = 5
)
# Coeficientes selecionados pelo lambda ótimo
coef_lasso <- coef(cv_lasso, s = "lambda.min")
vars_selected <- rownames(coef_lasso)[coef_lasso[,1] != 0]
vars_selected <- vars_selected[vars_selected != "(Intercept)"]
vars_selected
# --- 4. Ajustar modelo Firth apenas com variáveis selecionadas ---
formula_firth <- as.formula(
paste("reocorrencia ~", paste(vars_selected, collapse = " + "))
)
vars_selected
modelo_firth_sel <- logistf(
reocorrencia ~ N + genero + risco + resposta_tratamento + estagio,
data = train_data,
control = logistf.control(maxit = 200),
plcontrol = logistpl.control(maxit = 500)
)
summary(modelo_firth_sel)
# --- 5. Avaliar desempenho em treino ---
train_pred_prob <- predict(modelo_firth_sel, type = "response")
train_pred <- ifelse(train_pred_prob > 0.5, "Sim", "Não")
confusionMatrix(factor(train_pred, levels=c("Não","Sim")), train_data$reocorrencia)
# --- 6. Avaliar desempenho em teste ---
# Precisamos usar a mesma codificação que model.matrix gerou
test_pred_prob <- predict(modelo_firth_sel, newdata = test_data, type = "response")
test_pred <- ifelse(test_pred_prob > 0.5, "Sim", "Não")
confusionMatrix(factor(test_pred, levels=c("Não","Sim")), test_data$reocorrencia)
summary(modelo_firth_sel)
# --- 4. Tabela de ORs e ICs ---
resultados <- data.frame(
Variavel = rownames(modelo_firth_sel$coef),
OR = exp(modelo_firth_sel$coef),
IC_lower = exp(modelo_firth_sel$ci.lower),
IC_upper = exp(modelo_firth_sel$ci.upper)
)
modelo_firth_sel$coefficients
exp(modelo_firth_sel$coefficients)
exp(modelo_firth_sel$coefficients)
# --- 1. Separar treino e teste ---
set.seed(123)
train_index <- createDataPartition(dt1$reocorrencia, p = 0.7, list = FALSE)
train_data <- dt1[train_index, ]
test_data  <- dt1[-train_index, ]
# --- 2. Preparar matriz para glmnet ---
x_train <- model.matrix(reocorrencia ~ ., train_data)[,-1]  # remove intercepto
y_train <- ifelse(train_data$reocorrencia == "Sim", 1, 0)
x_test <- model.matrix(reocorrencia ~ ., test_data)[,-1]
y_test <- ifelse(test_data$reocorrencia == "Sim", 1, 0)
# --- 3. Rodar Elastic Net com validação cruzada ---
set.seed(123)
cv_en <- cv.glmnet(
x_train, y_train,
alpha = 0.5,         # Elastic Net (0.5 = mistura Lasso + Ridge)
family = "binomial",
nfolds = 5
)
# Melhor lambda
lambda_min <- cv_en$lambda.min
# --- 4. Extrair variáveis selecionadas ---
coef_en <- coef(cv_en, s = "lambda.min")
selected_vars <- rownames(coef_en)[coef_en[,1] != 0]
selected_vars <- selected_vars[selected_vars != "(Intercept)"]
print("Variáveis selecionadas pelo Elastic Net:")
print(selected_vars)
modelo_firth_en <- logistf(
formula = reocorrencia ~ T + N + genero + quadro_tireoide + adenopatia +
patologia + risco + resposta_tratamento + estagio,
data = train_data,
control = logistf.control(maxit = 200),
plcontrol = logistpl.control(maxit = 500))
summary(modelo_firth_en)
summary(modelo_firth_en)
summary(modelo_firth_en)
# --- 6. Avaliação no treino e teste ---
# Probabilidades
train_pred_prob <- predict(modelo_firth_en, type = "response")
test_pred_prob  <- predict(modelo_firth_en, newdata = test_data, type = "response")
# Predições binárias
train_pred <- ifelse(train_pred_prob > 0.5, "Sim", "Não")
test_pred  <- ifelse(test_pred_prob  > 0.5, "Sim", "Não")
# Matriz de confusão
conf_train <- confusionMatrix(factor(train_pred, levels = c("Não","Sim")), train_data$reocorrencia)
conf_test  <- confusionMatrix(factor(test_pred, levels = c("Não","Sim")), test_data$reocorrencia)
print(conf_train)
print(conf_test)
# Curva ROC
library(pROC)
roc_train <- roc(train_data$reocorrencia, train_pred_prob, levels = c("Não","Sim"))
roc_test  <- roc(test_data$reocorrencia, test_pred_prob, levels = c("Não","Sim"))
print(paste("AUC Treino:", round(auc(roc_train),3)))
print(paste("AUC Teste:", round(auc(roc_test),3)))
exp(modelo_firth_en$coefficients)
exp(modelo_firth_en$coefficients)
exp(modelo_firth_sel$coefficients)
anova.logistf(modelo_firth_sel, modelo_firth_en)
anova(modelo_firth_sel, modelo_firth_en)
modelo_firth_en
summary(modelo_firth_en)
# Extrair coeficientes e ICs
coef_df <- data.frame(
Variavel = rownames(modelo_firth_en$coef),
Coef = modelo_firth_en$coef,
Lower = modelo_firth_en$ci.lower,
Upper = modelo_firth_en$ci.upper
)
# Extrair coeficientes e ICs
coef_df <- data.frame(
Variavel = rownames(modelo_firth_en$coef),
Coef = modelo_firth_en$coefficients,
Lower = modelo_firth_en$ci.lower,
Upper = modelo_firth_en$ci.upper
)
# Extrair coeficientes e ICs
coef_df <- data.frame(
Variavel = rownames(modelo_firth_en$coefficients),
Coef = modelo_firth_en$coefficients,
Lower = modelo_firth_en$ci.lower,
Upper = modelo_firth_en$ci.upper
)
View(modelo_firth_en)
modelo_firth_en[["terms"]]
# Extrair coeficientes e ICs
coef_df <- data.frame(
Variavel = rownames(modelo_firth_en$terms),
Coef = modelo_firth_en$coefficients,
Lower = modelo_firth_en$ci.lower,
Upper = modelo_firth_en$ci.upper
)
coef_df <- data.frame(
Variavel = names(modelo_firth_en$coefficients),
Coef = modelo_firth_en$coefficients,
Lower = modelo_firth_en$ci.lower,
Upper = modelo_firth_en$ci.upper
)
coef_df <- coef_df %>%
mutate(
OR = exp(Coef),
OR_lower = exp(Lower),
OR_upper = exp(Upper)
)
coef_df
coef_df
